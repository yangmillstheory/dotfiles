" basis {{{
"
"   https://gist.github.com/jawshooah/acfd0839d4da0ab04e24
"
" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set nobackup		" don't keep a backup file (restore to previous version)
set noundofile	" don't keep an undo file (undo changes after closing)
set noswapfile
set history=25	" keep 50 lines of command line history
set ruler		    " show the cursor position all the time
set showcmd		  " display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

if has('langmap') && exists('+langnoremap')
  " Prevent that the langmap option applies to characters that result from a
  " mapping.  If unset (default), this may break plugins (but it's backward
  " compatible).
  set langnoremap
endif
" }}}

" global settings {{{
set noshowmode
set nocursorcolumn
set nocursorline
set nowrap
set expandtab
set relativenumber
set number
set omnifunc=syntaxcomplete#Complete
set hidden
set wildmenu
set wildmode=longest:full,full
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif
set wildignore+=*.so,*.swp,*.zip,*/.Trash/**,*.pdf,*.dmg,*/Library/**,*/.rbenv/**
set wildignore+=*/.nx/**,*.app
set termguicolors
set encoding=utf-8
let mapleader="\<space>"
let maplocalleader="\\"
set shiftwidth=2
set tabstop=2
set softtabstop=2
" preview substitution (neovim-only)
"
"   https://asciinema.org/a/92207
set inccommand=split

" indenting
set cinkeys-=0#
set indentkeys-=0#

set statusline+=%#warningmsg#
set statusline+=%F
set suffixesadd+=.js
set suffixesadd+=.go
set suffixesadd+=.py
" }}}

" plugins {{{
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source ~/.vim/vimrc
endif
call plug#begin('~/.vim/plugged')
Plug 'altercation/vim-colors-solarized'
Plug 'autozimu/LanguageClient-neovim', {
\ 'branch': 'next',
\ 'do': 'bash install.sh',
\ }
Plug 'christoomey/vim-tmux-navigator'
Plug 'edkolev/tmuxline.vim', { 'on': 'Tmuxline' }
Plug 'fatih/vim-go', { 'do': 'GoUpdateBinaries' }
Plug 'itchyny/lightline.vim'
Plug 'mattn/calendar-vim'
Plug 'matze/vim-move'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/fzf', { 'do': './install --all --xdg' }
Plug 'junegunn/fzf.vim'
Plug 'morhetz/gruvbox'
Plug 'ntpeters/vim-better-whitespace'
Plug 'scrooloose/nerdtree'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'Shougo/neosnippet.vim'
Plug 'Shougo/neosnippet-snippets'
Plug 'tmux-plugins/vim-tmux'
Plug 'simeji/winresizer'
Plug 'skywind3000/asyncrun.vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'vimwiki/vimwiki'
Plug 'w0rp/ale'
Plug 'yangmillstheory/vim-python', { 'for': 'python' }
Plug 'yangmillstheory/vim-snippets'
Plug 'yangmillstheory/vim-snipe'
Plug 'zchee/deoplete-go', { 'do': 'make'}
call plug#end()
" }}}

" plugin settings {{{
" ale {{{
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
" }}}

" autopairs {{{
let g:AutoPairsShortcutToggle = ''
let g:AutoPairsShortcutJump = ''
let g:AutoPairsShortcutBackInsert = ''
let g:AutoPairsShortcutFastWrap = ''
" }}}

" colorscheme {{{
" gruvbox {{{
"
"   https://github.com/morhetz/gruvbox/wiki/Terminal-specific
let g:gruvbox_contrast_dark    = 'medium'
let g:gruvbox_contrast_light   = 'medium'
let g:gruvbox_invert_selection = 0
let g:gruvbox_italic           = 1
let g:gruvbox_bold             = 1
let g:gruvbox_underline        = 1
let g:gruvbox_undercurl        = 1
" }}}

syntax enable
set background=dark
colorscheme gruvbox

hi Normal     guibg=NONE ctermbg=NONE
hi CursorLine cterm=none gui=none
" }}}

" deoplete {{{
let g:deoplete#enable_at_startup = 1

" this is really a global setting;
" but it's related to completion
if has("patch-7.4.314")
 set shortmess+=c
endif
" }}}

" deoplete-go {{{
let g:deoplete#sources#go#gocode_binary = $HOME . '/go/bin/gocode'
" }}}
" }}}

" fzf.vim {{{
let g:fzf_buffers_jump = 1
" use the same semantics for fzf as in shell
nnoremap <silent> <c-t> :FzfFiles<CR>
nnoremap <silent> <c-f> :FzfRg<space>
nnoremap <silent> <c-b> :FzfBuffers<CR>
nnoremap <silent> <c-r> :FzfHistory:<CR>
nnoremap <silent> <c-s> :FzfHistory/<CR>
nnoremap <silent> <Leader>z :FzfFasdFile<space>
nnoremap <silent> <Leader>Z :FzfFasdDir<space>
" keep actions compatible with nerdtree
let g:fzf_action = {
\ 'ctrl-t': 'tab split',
\ 'ctrl-i': 'split',
\ 'ctrl-s': 'vsplit'
\ }
let g:fzf_colors = {
\ 'fg':      ['fg', 'Normal'],
\ 'bg':      ['bg', 'Normal'],
\ 'hl':      ['fg', 'Comment'],
\ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
\ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
\ 'hl+':     ['fg', 'Statement'],
\ 'info':    ['fg', 'PreProc'],
\ 'prompt':  ['fg', 'Conditional'],
\ 'pointer': ['fg', 'Exception'],
\ 'marker':  ['fg', 'Keyword'],
\ 'spinner': ['fg', 'Label'],
\ 'header':  ['fg', 'Comment'] }
let g:fzf_command_prefix = 'Fzf'
" explicitly include/exclude directories from fzf + rg
" these aren't plugin options, but our own :)
let g:rg_include = []
let g:rg_exclude = []

" https://github.com/junegunn/fzf.vim#advanced-customization
" make sure that we can pass multiple directories to fzf sources
function! s:RgArgs(q_args) abort
  let rg_args = []
  if len(g:rg_exclude)
    let rg_args += ["--glob=!{" . join(g:rg_exclude, ",") . "}"]
  endif
  if len(a:q_args)
    let rg_args += [a:q_args]
  endif
  return join(rg_args + g:rg_include, " ")
endfunction
command! -bang -complete=dir FzfFiles
\ call fzf#run(fzf#wrap({
\     'source': $FZF_DEFAULT_COMMAND . " " . s:RgArgs('--files'),
\     'options': $FZF_DEFAULT_OPTS . " " . $FZF_CTRL_T_OPTS,
\   }),
\   <bang>0
\ )
command! -bang -nargs=* FzfRg
\ call fzf#vim#grep(
\   'rg --hidden --ignore-case --column --line-number --no-heading --color=always ' . s:RgArgs(<q-args>), 1,
\   <bang>0 ? fzf#vim#with_preview('up:60%')
\           : fzf#vim#with_preview('right:50%'),
\   <bang>0)
function! s:Fasd(cmd)
  let cmd = a:cmd
  function! FasdSink(line) closure
    execute(cmd . ' ' . split(a:line)[-1])
  endfunction
  return funcref('FasdSink')
endfunction
command! -bang -nargs=* FzfFasdFile
\ call fzf#run(fzf#wrap({'source': 'fasd -lf -R '. shellescape(<q-args>), 'sink': s:Fasd('e')}))
command! -bang -nargs=* FzfFasdDir
\ call fzf#run(fzf#wrap({'source': 'fasd -ld -r '. shellescape(<q-args>), 'sink': s:fasd('cd')}))
" not yet:
"
"     https://github.com/junegunn/fzf.vim/issues/195
"
" command! -bang -nargs=? -complete=dir FzfBuffers
"   \ call fzf#vim#buffers(<q-args>, fzf#vim#with_preview(), <bang>0)
" }}}

" LanguageClient {{{
"https://github.com/autozimu/LanguageClient-neovim/wiki/Recommended-Settings
let g:LanguageClient_serverCommands = {
\  'python': ['/google/bin/releases/grok/tools/kythe_languageserver'],
\  'go': ['/google/bin/releases/editor-devtools/ciderlsp'],
\  'cpp': ['/google/bin/releases/editor-devtools/ciderlsp'],
\  'proto': ['/google/bin/releases/editor-devtools/ciderlsp'],
\  'borg': ['/google/bin/releases/editor-devtools/ciderlsp'],
\ }

let g:LanguageClient_loadSettings = 0

nnoremap <leader>ld :call LanguageClient#textDocument_definition()<CR>
nnoremap <leader>lr :call LanguageClient#textDocument_rename()<CR>
nnoremap <leader>lf :call LanguageClient#textDocument_formatting()<CR>
nnoremap <leader>lt :call LanguageClient#textDocument_typeDefinition()<CR>
nnoremap <leader>lx :call LanguageClient#textDocument_references()<CR>
nnoremap <leader>la :call LanguageClient_workspace_applyEdit()<CR>
nnoremap <leader>lc :call LanguageClient#textDocument_completion()<CR>
nnoremap <leader>lh :call LanguageClient#textDocument_hover()<CR>
nnoremap <leader>ls :call LanguageClient_textDocument_documentSymbol()<CR>
nnoremap <leader>lm :call LanguageClient_contextMenu()<CR>

set signcolumn=yes
" https://github.com/autozimu/LanguageClient-neovim/issues/379
let g:LanguageClient_hasSnippetSupport = 0
let g:LanguageClient_diagnosticsDisplay = {
\ 1: {
\   "name": "Error",
\   "texthl": "ALEError",
\   "signText": "✖",
\   "signTexthl": "ALEErrorSign",
\ },
\ 2: {
\   "name": "Warning",
\   "texthl": "ALEWarning",
\   "signText": "❗",
\   "signTexthl": "ALEWarningSign",
\ },
\ 3: {
\   "name": "Information",
\   "texthl": "ALEInfo",
\   "signText": "ℹ",
\   "signTexthl": "ALEInfoSign",
\ },
\ 4: {
\   "name": "Hint",
\   "texthl": "ALEInfo",
\   "signText": "➤",
\   "signTexthl": "ALEInfoSign",
\ },
\ }
" }}}

"  lightline {{{
let g:lightline = {
\  'colorscheme': 'gruvbox',
\  'separator': { 'left': '', 'right': '' },
\  'subseparator': { 'left': '', 'right': '' },
\  'active': {
\    'left': [ [ 'mode', 'paste' ],
\              [ 'filename', 'modified', 'readonly' ] ],
\    'right': [ [ 'ale_warning', 'ale_error', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
\  },
\  'component_type': {
\    'ale_error': 'error',
\    'ale_warning': 'warning',
\  },
\  'component_function': {
\    'readonly': 'LightlineReadonly',
\    'filename': 'LightlineFilename',
\    'modified': 'LightlineModified',
\  },
\}
" lightline functions {{{
function! LightlineModified()
  return &ft =~ 'help\|vimfiler' ? '' : &modified ? '✗' : &modifiable ? '' : '-'
endfunction
function! LightlineReadonly()
  return &readonly ? '' : ''
endfunction
function! LightlineFilename()
  return expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
endfunction
" }}}
"  }}}

" NERDTree {{{
nnoremap <C-n> :NERDTreeToggle<CR>
nnoremap <Leader>n :NERDTreeFind<CR>
let NERDTreeShowHidden = 1
" }}}

" neosnippets {{{
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
if has('conceal')
set conceallevel=2 concealcursor=niv
endif
let g:neosnippet#enable_completed_snippet = 1
" }}}

" tmuxline {{{
let g:tmuxline_status_justify = 'left'
let g:tmuxline_theme = 'minimal'
let g:tmuxline_preset = {
\'a'    : '#S',
\'b'    : ['#[bold]#(g3-short-path #{pane_current_path})', '#[italics,nobold]#{pane_current_command}'],
\'win'  : ['#I', '#W'],
\'cwin' : ['#[bold]#I', '#W'],
\'y'    : [
\  '%I:%M %p (%Z)',
\  '%a %b %d',
\],
\'z': '#[bold]#H'
\}
" }}}

" vim-better-whitespace {{{
autocmd BufEnter * EnableStripWhitespaceOnSave
autocmd BufEnter * DisableWhitespace
" }}}

" vim-go {{{
let g:go_def_mapping_enabled = 0
let g:go_info_mode = 'guru'
let g:go_echo_go_info = 0
let g:go_def_mode = 'guru'
let g:go_fmt_command = "goimports"
let g:go_autodetect_gopath = 1
let g:go_list_type = "quickfix"
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_generate_tags = 1

" Open :GoDeclsDir with ctrl-g
nmap <C-g> :GoDeclsDir<cr>
imap <C-g> <esc>:<C-u>GoDeclsDir<cr>

augroup go
  autocmd!
  autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 softtabstop=4 shiftwidth=4
augroup END
" }}}

" vim-move {{{
let g:move_map_keys = 0
vmap <A-S-h> <Plug>MoveBlockLeft
vmap <A-S-j> <Plug>MoveBlockDown
vmap <A-S-k> <Plug>MoveBlockUp
vmap <A-S-l> <Plug>MoveBlockRight
nmap <A-S-h> <Plug>MoveCharLeft
nmap <A-S-j> <Plug>MoveLineDown
nmap <A-S-k> <Plug>MoveLineUp
nmap <A-S-l> <Plug>MoveCharRight
" }}}

" vim-snipe {{{
map <leader><leader>F <Plug>(snipe-F)
map <leader><leader>f <Plug>(snipe-f)
map <leader><leader>T <Plug>(snipe-T)
map <leader><leader>t <Plug>(snipe-t)
map <leader><leader>w <Plug>(snipe-w)
map <leader><leader>W <Plug>(snipe-W)
map <leader><leader>e <Plug>(snipe-e)
map <leader><leader>E <Plug>(snipe-E)
map <leader><leader>b <Plug>(snipe-b)
map <leader><leader>B <Plug>(snipe-B)
map <leader><leader>ge <Plug>(snipe-ge)
map <leader><leader>gE <Plug>(snipe-gE)
nmap <leader><leader>] <Plug>(snipe-f-xp)
nmap <leader><leader>[ <Plug>(snipe-F-xp)
nmap <leader><leader>x <Plug>(snipe-f-x)
nmap <leader><leader>X <Plug>(snipe-F-x)
nmap <leader><leader>r <Plug>(snipe-f-r)
nmap <leader><leader>R <Plug>(snipe-F-r)
nmap <leader><leader>i <Plug>(snipe-f-i)
nmap <leader><leader>I <Plug>(snipe-F-i)
nmap <leader><leader>a <Plug>(snipe-f-a)
nmap <leader><leader>A <Plug>(snipe-F-a)
" }}}

" vim-tmux-navigator {{{
" https://github.com/christoomey/vim-tmux-navigator/#vim-1
let g:tmux_navigator_no_mappings = 1
let g:tmux_navigator_disable_when_zoomed = 1
nnoremap <silent> <A-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <A-j> :TmuxNavigateDown<cr>
nnoremap <silent> <A-k> :TmuxNavigateUp<cr>
nnoremap <silent> <A-l> :TmuxNavigateRight<cr>
" }}}

" vimwiki {{{
let g:vimwiki_list = [{'path': '$HOME/vimwiki/personal'}]
let g:vimwiki_hl_cb_checked = 1
let g:vimwiki_use_calendar = 1
let g:calendar_options = 'nornu'
let g:calendar_diary = '$HOME/vimwiki/personal/diary'
let g:calendar_no_mappings = 1
" }}}

" winresizer {{{
let g:winresizer_start_key = '<leader>r'
" }}}
" }}}

" (au)commands, mappings, languages {{{
" vimscript and vimrc {{{
function! s:Help(type)
if a:type ==# 'v'
  normal! `<v`>y
elseif a:type ==# 'char'
  normal! `[v`]y
else
  return
endif
let saved = @@
silent execute "h " . @@
let @@ = saved
endfunction
augroup vimscript
  autocmd!
  " write and save the current file
  autocmd Filetype vim nnoremap <F3> :w!<cr> :so %<cr>
  " F1 = help
  autocmd FileType vim vnoremap <F1> :<c-u>call <SID>Help(visualmode())<cr>
  autocmd FileType vim nnoremap <F1> :set operatorfunc=<SID>Help<cr>g@
  autocmd FileType vim nnoremap <F1><F1> :h <c-r><c-w><cr>
augroup END
augroup vimrc
  autocmd!
  autocmd BufRead vimrc setlocal foldmethod=marker
  autocmd BufRead vimrc setlocal foldlevelstart=0
augroup END
" }}}

" edit common files {{{
nnoremap <leader>ev :vsp ~/.vim/vimrc<cr>
nnoremap <leader>ea :vsp ~/.config/alacritty/alacritty.yml<cr>
nnoremap <leader>et :vsp ~/.tmux.conf<cr>
nnoremap <leader>ez :vsp ~/.zshrc<cr>
nnoremap <leader>es :vsp scrap<cr>
" }}}

" registers {{{
nnoremap "" "_
" }}}

" misc {{{
" folding, editing {{{
nnoremap <A-z> za
vnoremap <A-z> za
nnoremap U :redo<cr>
" }}}

" writing, quitting, opening {{{
nnoremap <A-w> :w<cr>
nnoremap <A-q> :q<cr>
nnoremap <A-cr> :wq<cr>
nnoremap <A-e> :e<Space>
" }}}

" casing {{{
inoremap <A-t> <c-[>bvgUea
inoremap <A-k> <c-[>viwUea
inoremap <A-j> <c-[>viwuea
" }}}

" tabs {{{
" open current buffer in a new tab
if !exists('g:last_tabpagenr')
  let g:last_tabpagenr = 1
endif
au TabLeave * let g:last_tabpagenr = tabpagenr()
nnoremap <A-t> :tab sp<cr>
nnoremap <A-[> gT
nnoremap <A-]> gt
nnoremap <A-\> :exe "tabn ".g:last_tabpagenr<CR>
" }}}

" F2 = google (depends on https://github.com/yangmillstheory/s) {{{
function! s:S(type)
  let saved = @@
  if a:type ==# 'V'
    normal! `<V`>y
  elseif a:type ==# 'v'
    normal! `<v`>y
  elseif a:type ==# 'char'
    normal! `[v`]y
  else
    return
  endif
  " remove trailing newline
  "
  "   https://stackoverflow.com/a/6228454
  let @@ = substitute(strtrans(@@), '\^@', '', 's')
  call system('g ' . shellescape(@@))
  let @@ = saved
endfunction
vnoremap <F2> :<c-u>call <SID>S(visualmode())<cr>
nnoremap <F2> :set operatorfunc=<SID>S<cr>g@
nnoremap <F2><F2> :silent !g <c-r><c-w><cr>
" }}}

" jumps {{{
"
"   https://github.com/teranex/jk-jumps.vim/blob/master/plugin/jk-jumps.vim
function! JkJumps(j_or_k)
exec "normal! " . v:count1 . a:j_or_k
if v:count1 > 1
  let target = line('.')
  let k_or_j = a:j_or_k == 'j'
        \ ? 'k'
        \ : 'j'
  exec 'normal! ' . v:count1 . k_or_j
  exec 'normal! ' . target . 'G'
endif
endfunction

nnoremap <silent> j :<C-U>call JkJumps('j')<CR>
nnoremap <silent> k :<C-U>call JkJumps('k')<CR>
" }}}

" search + replace {{{
nnoremap <silent> <leader><esc> :noh<cr>
nnoremap <A-r> :%s//g<Left><Left>
vnoremap <A-r> :s//g<Left><Left>
" }}}

" vimgrep {{{
if executable("rg")
  set grepprg=rg\ --vimgrep\ --no-heading
  set grepformat=%f:%l:%c:%m,%f:%l:%m
endif
" grep into quickfix list
"
" http://learnvimscriptthehardway.stevelosh.com/chapters/34.html
function! s:GrepOperator(type)
  let saved = @@
  if a:type ==# 'v'
    normal! `<v`>y
  elseif a:type ==# 'char'
    normal! `[v`]y
  else
    return
  endif
  silent execute "grep! " . s:RgArgs(shellescape(@@))
  copen
  let @@ = saved
endfunction

nnoremap <leader>g :set operatorfunc=<SID>GrepOperator<cr>g@
vnoremap <leader>g :<c-u>call <SID>GrepOperator(visualmode())<cr>
" }}}
" }}}

" google {{{
source /usr/share/vim/google/google.vim

" glugins {{{
Glug codefmt-google
" Glug ultisnips-google
" Glug youcompleteme-google
" }}}

" glugin config {{{
" ultisnips {{{
" let g:UltiSnipsExpandTrigger = "<c-j>"
" let g:UltiSnipsJumpForwardTrigger = "<c-j>"
" let g:UltiSnipsJumpBackwardTrigger = "<c-k>"
" }}}

" codefmt-google {{{
augroup autoformat_settings
  autocmd FileType borg,gcl,patchpanel AutoFormatBuffer gclfmt
  autocmd FileType bzl AutoFormatBuffer buildifier
  autocmd FileType c,cpp,proto,javascript AutoFormatBuffer clang-format
  autocmd FileType go AutoFormatBuffer gofmt
  autocmd FileType java AutoFormatBuffer google-java-format
  autocmd FileType markdown AutoFormatBuffer mdformat
  autocmd FileType python AutoFormatBuffer pyformat
  autocmd FileType textpb AutoFormatBuffer text-proto-format
augroup END
" }}}

" ycm {{{
" let g:ycm_clangd_binary_path = "/google/bin/releases/editor-devtools/ciderlsp"
" }}}

" lang {{{
" go {{{
Glug codefmt gofmt_executable="goimports"
Glug codefmt-google
Glug blazedeps auto_filetypes=`['go']`
" }}}
" }}}
" }}}

" codesearch + fzf.vim {{{
function! s:CSearchSink(path)
  execute "edit " . <SID>add_depot_root(a:path)
endfunction
function! s:citcroot()
  return matchstr(getcwd(), '^/google/src/cloud/[^/]\+/[^/]\+/')
endfunction
function! s:add_depot_root(path)
  if <SID>in_citc()
    return <SID>citcroot() . a:path
  else
    return "/google/src/files/head/depot" . a:path
  endif
endfunction
function! s:in_citc()
  return match(getcwd(), '^/google/src/cloud/') != -1
endfunction
function! s:csearch(args)
  let b:root='/google/src/files/head/depot'
  if <SID>in_citc()
    let b:root=<SID>citcroot()
  endif
  call fzf#run({
        \ 'source': "csearch -l " . a:args. "| sed 's|^/google/src/files/head/depot||'",
        \ 'sink': function("s:CSearchSink"),
        \ 'options': '-m --preview="cat ' . b:root . '{}"',
        \ 'down': '30%'
        \ })
endfunction
command! -nargs=+ CSearch :call <SID>csearch("<args>")
" }}}
" }}}
" }}}
