" global settings {{{
set noshowmode
set cursorcolumn
set cursorline
set nowrap
set expandtab
set relativenumber
set number
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set termguicolors
set shiftwidth=2
set tabstop=2
set softtabstop=2
" preview substitution (neovim-only)
"
"   https://asciinema.org/a/92207
set inccommand=split
let g:ruby_host_prog = '/home/victoralvarez/.gem/ruby/2.5.0/bin/neovim-ruby-host'
let mapleader = ' '

" disable unused providers: https://neovim.io/doc/user/provider.html
let g:loaded_ruby_provider = 0
let g:loaded_node_provider = 0
" }}}

" plugins {{{
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source ~/.vim/vimrc
endif
call plug#begin('~/.vim/plugged')
Plug 'autozimu/LanguageClient-neovim', {
\ 'branch': 'next',
\ 'do': 'bash install.sh',
\ }
Plug 'christoomey/vim-tmux-navigator'
Plug 'edkolev/tmuxline.vim', { 'on': 'Tmuxline' }
Plug 'itchyny/lightline.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/fzf', { 'do': './install --all --xdg' }
Plug 'junegunn/fzf.vim'
Plug 'matze/vim-move'
Plug 'mhinz/vim-startify'
Plug 'morhetz/gruvbox'
Plug 'tmux-plugins/vim-tmux'
Plug 'simeji/winresizer'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-obsession'
Plug 'yangmillstheory/vim-snipe'
call plug#end()
" }}}

" plugin settings {{{
" autopairs {{{
let g:AutoPairsShortcutToggle = ''
let g:AutoPairsShortcutJump = ''
let g:AutoPairsShortcutBackInsert = ''
let g:AutoPairsShortcutFastWrap = ''
" }}}

" colorscheme {{{
" gruvbox {{{
"
"   https://github.com/morhetz/gruvbox/wiki/Terminal-specific
let g:gruvbox_contrast_dark    = 'medium'
let g:gruvbox_contrast_light   = 'medium'
let g:gruvbox_invert_selection = 0
let g:gruvbox_italic           = 1
let g:gruvbox_bold             = 1
let g:gruvbox_underline        = 1
let g:gruvbox_undercurl        = 1
" }}}

set background=dark
colorscheme gruvbox

hi Normal     guibg=NONE ctermbg=NONE
hi CursorLine cterm=none gui=none
" }}}

" fzf.vim {{{
let g:fzf_buffers_jump = 1
" use the same semantics for fzf as in shell
" keep actions compatible with nerdtree
let g:fzf_action = {
\ 'ctrl-t': 'tab split',
\ 'ctrl-i': 'split',
\ 'ctrl-s': 'vsplit'
\ }
let g:fzf_colors = {
\ 'fg':      ['fg', 'Normal'],
\ 'bg':      ['bg', 'Normal'],
\ 'hl':      ['fg', 'Comment'],
\ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
\ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
\ 'hl+':     ['fg', 'Statement'],
\ 'info':    ['fg', 'PreProc'],
\ 'prompt':  ['fg', 'Conditional'],
\ 'pointer': ['fg', 'Exception'],
\ 'marker':  ['fg', 'Keyword'],
\ 'spinner': ['fg', 'Label'],
\ 'header':  ['fg', 'Comment'] }
let g:fzf_command_prefix = 'Fzf'
let g:fzf_layout = { 'window': 'call FloatingFZF()' }
function! FloatingFZF()
  let buf = nvim_create_buf(v:false, v:true)
  let h = float2nr(&lines * 0.9)
  let w = float2nr(&columns * 0.8)
  let horz = float2nr((&columns - w) / 2)
  let vert = 1
  let opts = {
  \ 'relative': 'editor',
  \ 'row': vert,
  \ 'col': horz,
  \ 'width': w,
  \ 'height': h
  \ }
  call nvim_open_win(buf, v:true, opts)
endfunction

nnoremap <silent> <c-t> :FzfFiles<CR>
nnoremap <silent> <c-f> :FzfRg<space>
nnoremap <silent> <c-b> :FzfBuffers<CR>
nnoremap <silent> <c-_> :FzfBLines<CR>
nnoremap <silent> <c-r> :FzfHistory:<CR>
nnoremap <silent> <c-s> :FzfHistory/<CR>
nnoremap <silent> <c-c> :FzfCommands<CR>
nnoremap <silent> <c-m> :FzfMarks<CR>

" https://github.com/junegunn/fzf.vim#advanced-customization
"
" explicitly include/exclude directories from fzf + rg
" these aren't plugin options, but our own :)
let g:rg_in = []
let g:rg_ex = []
nnoremap <Leader>d q:ilet g:rg_in=['']<esc>hi
function! s:RgArgs(args) abort
  let rg_args = []
  if len(g:rg_ex)
    let rg_args += ["--glob=!{" . join(g:rg_ex, ",") . "}"]
  endif
  if len(a:args)
    let rg_args += [a:args]
  endif
  return join(rg_args + g:rg_in, " ")
endfunction
command! -bang -complete=dir -nargs=? FzfFiles
\ call fzf#run(fzf#wrap({
\     'source': $FZF_DEFAULT_COMMAND . " " . s:RgArgs(''),
\     'options': $FZF_DEFAULT_OPTS . " " . $FZF_CTRL_T_OPTS,
\   }),
\   <bang>0
\ )
command! -bang -nargs=* FzfRg
\ call fzf#vim#grep(
\   "rg --hidden --ignore-case --column --line-number --no-heading --color=always " . s:RgArgs(<q-args>), 1,
\   <bang>0 ? fzf#vim#with_preview('up:60%')
\           : fzf#vim#with_preview('right:50%'),
\   <bang>0)
" }}}

"  lightline {{{
let g:lightline = {
\  'colorscheme': 'gruvbox',
\  'separator': { 'left': '', 'right': '' },
\  'subseparator': { 'left': '', 'right': '' },
\  'active': {
\    'left': [ [ 'mode', 'paste' ],
\              [ 'filename', 'modified', 'readonly' ] ],
\    'right': [ [ 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
\  },
\  'component_function': {
\    'readonly': 'LightlineReadonly',
\    'filename': 'LightlineFilename',
\    'modified': 'LightlineModified',
\  },
\}
" lightline functions {{{
function! LightlineModified()
  return &ft =~ 'help\|vimfiler' ? '' : &modified ? '✗' : &modifiable ? '' : '-'
endfunction
function! LightlineReadonly()
  return &readonly ? '' : ''
endfunction
function! LightlineFilename()
  return expand('%') !=# '' ? fnamemodify(expand('%'), ":~:.") : '[No Name]'
endfunction
" }}}
"  }}}

" tmuxline {{{
let g:tmuxline_status_justify = 'left'
let g:tmuxline_theme = 'lightline'
let g:tmuxline_preset = {
\'a'    : '#S',
\'b'    : ['#(compact-path #{pane_current_path})', '#[italics,nobold]#{pane_current_command}'],
\'win'  : ['#I', '#W'],
\'cwin' : ['#I', '#W'],
\'y'    : [
\  '#[bold]%I:%M %p (%Z)',
\  '#[bold]%a %b %d',
\],
\'z': '#h'
\}
" }}}

" vim-move {{{
let g:move_map_keys = 0
vmap <A-S-h> <Plug>MoveBlockLeft
vmap <A-S-j> <Plug>MoveBlockDown
vmap <A-S-k> <Plug>MoveBlockUp
vmap <A-S-l> <Plug>MoveBlockRight
nmap <A-S-h> <Plug>MoveCharLeft
nmap <A-S-j> <Plug>MoveLineDown
nmap <A-S-k> <Plug>MoveLineUp
nmap <A-S-l> <Plug>MoveCharRight
" }}}

" vim-snipe {{{
map <leader><leader>F <Plug>(snipe-F)
map <leader><leader>f <Plug>(snipe-f)
map <leader><leader>T <Plug>(snipe-T)
map <leader><leader>t <Plug>(snipe-t)
map <leader><leader>w <Plug>(snipe-w)
map <leader><leader>W <Plug>(snipe-W)
map <leader><leader>e <Plug>(snipe-e)
map <leader><leader>E <Plug>(snipe-E)
map <leader><leader>b <Plug>(snipe-b)
map <leader><leader>B <Plug>(snipe-B)
map <leader><leader>ge <Plug>(snipe-ge)
map <leader><leader>gE <Plug>(snipe-gE)
nmap <leader><leader>] <Plug>(snipe-f-xp)
nmap <leader><leader>[ <Plug>(snipe-F-xp)
nmap <leader><leader>x <Plug>(snipe-f-x)
nmap <leader><leader>X <Plug>(snipe-F-x)
nmap <leader><leader>r <Plug>(snipe-f-r)
nmap <leader><leader>R <Plug>(snipe-F-r)
nmap <leader><leader>i <Plug>(snipe-f-i)
nmap <leader><leader>I <Plug>(snipe-F-i)
nmap <leader><leader>a <Plug>(snipe-f-a)
nmap <leader><leader>A <Plug>(snipe-F-a)
" }}}

" vim-tmux-navigator {{{
" https://github.com/christoomey/vim-tmux-navigator/#vim-1
let g:tmux_navigator_no_mappings = 1
let g:tmux_navigator_disable_when_zoomed = 1
nnoremap <silent> <A-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <A-j> :TmuxNavigateDown<cr>
nnoremap <silent> <A-k> :TmuxNavigateUp<cr>
nnoremap <silent> <A-l> :TmuxNavigateRight<cr>
" }}}

" winresizer {{{
let g:winresizer_start_key = '<leader>r'
" make it like i3
let g:winresizer_keycode_up   = 106
let g:winresizer_keycode_down = 107
" }}}
" }}}

" (au)commands, mappings, languages {{{
" vimscript and vimrc {{{
augroup vimrc
  autocmd!
  autocmd BufRead vimrc setlocal foldmethod=marker
  autocmd BufRead vimrc setlocal foldlevelstart=0
augroup END
" }}}

" edit common files {{{
nnoremap <leader>ev :vsp ~/.vim/vimrc<cr>
nnoremap <leader>ea :vsp ~/.config/alacritty/alacritty.yml<cr>
nnoremap <leader>ei :vsp ~/.config/i3/config<cr>
nnoremap <leader>et :vsp ~/.tmux.conf<cr>
nnoremap <leader>ez :vsp ~/.zshrc<cr>
nnoremap <leader>es :vsp scrap<cr>
" }}}

" misc {{{
" mappings {{{
" yanking
nnoremap <A-y> "+y
vnoremap <A-y> "+y
" folding
nnoremap <A-z> za
vnoremap <A-z> za
" black hole register
nnoremap "" "_
"

" a more intuitive mapping for :redo
nnoremap U :redo<cr>

" writing & quitting
nnoremap <A-w> :w<cr>
nnoremap <A-q> :q<cr>
nnoremap <A-cr> :wq<cr>
" opening
nnoremap <A-e> :e
nnoremap <A-e><A-e> :e!<cr>
nnoremap <cr><cr> :
vnoremap <cr><cr> :
" }}}

" buffer management {{{
" equalize buffers
nnoremap <A-=> <C-w>=
" }}}

" tabs {{{
" open current buffer in a new tab
if !exists('g:last_tabpagenr')
  let g:last_tabpagenr = 1
endif
au TabLeave * let g:last_tabpagenr = tabpagenr()
nnoremap <A-t> :tab sp<cr>
nnoremap <A-[> gT
nnoremap <A-]> gt
nnoremap <A-\> :exe "tabn ".g:last_tabpagenr<CR>
" }}}

" jumps {{{
"
"   https://github.com/teranex/jk-jumps.vim/blob/master/plugin/jk-jumps.vim
function! JkJumps(j_or_k)
exec "normal! " . v:count1 . a:j_or_k
if v:count1 > 1
  let target = line('.')
  let k_or_j = a:j_or_k == 'j'
        \ ? 'k'
        \ : 'j'
  exec 'normal! ' . v:count1 . k_or_j
  exec 'normal! ' . target . 'G'
endif
endfunction

nnoremap <silent> j :<C-U>call JkJumps('j')<CR>
nnoremap <silent> k :<C-U>call JkJumps('k')<CR>
" }}}

" search + replace {{{
nnoremap <silent> <leader><esc> :noh<cr>
nnoremap <A-r> :%s//g<Left><Left>
vnoremap <A-r> :s//g<Left><Left>
" }}}
" }}}
" }}}
